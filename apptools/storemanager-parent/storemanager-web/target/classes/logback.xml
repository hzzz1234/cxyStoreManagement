<?xml version="1.0" encoding="UTF-8"?>
<!--logback根节点,scan为true表示定时重载配置文件来更新日志配置,scanPeriod扫描时间间隔,debug表示是否打印logback内部日志,默认为false,设置不可修改-->
<configuration scan="true" scanPeriod="60 seconds" debug="false">
    <!--设置日志上下文名称用来给logger关联,默认为default,设置了可以用来区分不同应用,设置不可修改-->
    <contextName>storemanager-web</contextName>

    <!--配置属性,以便后续可以通过${}当变量来使用,定义日志文件的存储地址 勿在 LogBack 的配置中使用相对路径-->
    <property name="LOG_HOME" value="/var/log/storemanager-web" />

    <!--appender设置写日志的组件:
        ConsoleAppender控制台打印;
        FileAppender文件打印;
        RollingFileAppender滚动记录文件,符合某条件是日志记录到其他文件-->
    <!-- 控制台输出 -->
    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <!-- 日志输出编码 -->
        <Encoding>UTF-8</Encoding>
        <!--对记录事件进行格式化-->
        <encoder>
            <!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符-->
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n
            </pattern>
        </encoder>
    </appender>

    <!-- 按照每天生成日志文件，生产使用 -->
    <appender name="FILE"  class="ch.qos.logback.core.rolling.RollingFileAppender">
        <Encoding>UTF-8</Encoding>
        <!--当发生滚动时，决定 RollingFileAppender 的行为，涉及文件移动和重命名；
            TimeBasedRollingPolicy:
                1. 最常用的滚动策略，它根据时间来制定滚动策略，既负责滚动也负责出发滚动-->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!--必要节点,“%d”转换符， “%d”可以包含一个java.text.SimpleDateFormat指定的时间格式，如：%d{yyyy-MM},如果直接使用 %d，默认格式是 yyyy-MM-dd,日志文件输出的文件名-->
            <FileNamePattern>${LOG_HOME}/storemanager-web-%d{yyyy-MM-dd}.log</FileNamePattern>
           <!--可选节点，控制保留的归档文件的最大数量，超出数量就删除旧文件-->
            <MaxHistory>30</MaxHistory>
            <!--ollingFileAppender 的file字节点可有可无，通过设置file，
            可以为活动文件和归档文件指定不同位置，当前日志总是记录到file指定的文件（活动文件），
            活动文件的名字不会改变；如果没设置file，活动文件的名字会根据fileNamePattern 的值，每隔一段时间改变一次。“/”或者“\”会被当做目录分隔符-->
            <file>${LOG_HOME}/storemanager-web.log</file>
        </rollingPolicy>

        <!--FixedWindowRollingPolicy:根据固定窗口算法重命名文件的滚动策略
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            //窗口索引最小值
            <minIndex>1</minIndex>
            //窗口索引最大值，当用户指定的窗口过大时，会自动将窗口设置为12
            <maxIndex></maxIndex>
            <FileNamePattern>${LOG_HOME}/storemanager-web-%i.log</FileNamePattern>
             <file>${LOG_HOME}/storemanager-web.log</file>
        </rollingPolicy>
        -->

        <!--SizeBasedTriggeringPolicy-->
        <encoder>
            <!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符-->
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n
            </pattern>
        </encoder>
        <!--告知 RollingFileAppender 合适激活滚动,这里是日志文件最大的大小,针对滚动窗口-->
        <triggeringPolicy class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">
            <MaxFileSize>10MB</MaxFileSize>
        </triggeringPolicy>
    </appender>

    <!-- root也是一个logger，但是它是顶层logger,当没有具体设置的时候默认使用它,对于没有设置属性的会继承root的，日志输出级别 -->
    <root level="DEBUG">
        <appender-ref ref="STDOUT" />
    </root>

    <!-- 用来设置某一个包或者具体的某一个类的日志打印级别、
        以及指定<appender>。<logger>仅有一个name属性，一个可选的level和一个可选的addtivity属性。
         name属性用来指定那个包或是类使用这个logger;
         level属性设置具体的日志级别（大小写无关）;
         addtivity属性表示是否向上级logger传递打印信息,默认true,当本logger没有设置appender的时候它为true就会传递到它的上级logger用来打印,为false就表示不传递,则没有appender就没有输出;
         logger包含0个或是多个<appender-ref>元素,表示添加到的具体打印方式（控制台,文件，数据库等）

    <logger name="org.hibernate.type.descriptor.sql.BasicBinder"  level="TRACE" addtivity="true">

    </logger>
    -->
</configuration> 
